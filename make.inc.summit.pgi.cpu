#==============================================================================
# Exciting-Plus make.inc file for Summit (OLCF) with PGI compilers
# Last edited: May 6, 2020 (WYP)
#==============================================================================

MAKE := make
COMPILER := pgi

# Compiler switch to turn on the preprocessor
CPP_OPTS := -Mpreprocess

# Add your custom preprocessor defines here
#CPP_OPTS +=

# Add your common compile time options here
F90_OPTS :=

#==============================================================================
# MPI
#==============================================================================

F90 := mpifort
CC  := mpicc
CXX := mpic++
MPI_CPP_OPTS := -D_MPI_
CPP_OPTS += $(MPI_CPP_OPTS)

# Note: MPIMOD_PATH no longer needed after Mar 10 2020 stack upgrade
# This is where mpi.mod resides
#MPIMOD_PATH = ${OLCF_SPECTRUM_MPI_ROOT}/lib/PGI
#F90_OPTS += -I${MPIMOD_PATH}

#==============================================================================
# OpenMP
#==============================================================================

# These are passed at compile time and link time
# Don't forget to `export OMP_STACKSIZE=2G` at runtime
OMP_OPTS := -mp

# Note: GCCOMP_PATH no longer needed after Mar 10 2020 stack upgrade
# IBM Spectrum MPI relies on libatomic and libpthreads
# from GCC's OpenMP libraries directory
# This path was extracted from the modules and stored as summit-gccpaths.sh
#GCCOMP_PATH = ${OLCF_GCC_ROOT}/lib64
#F90_LINK_OPTS := -L${GCCOMP_PATH}

#==============================================================================
# Serial compiler (for utilities)
#==============================================================================

F90SERIAL := pgfortran
F90_OPTS_SERIAL = $(filter-out $(OMP_OPTS),$(filter-out $(MPI_CPP_OPTS),$(F90_OPTS)))

# Note: MPIMOD_PATH no longer needed after Mar 10 2020 stack upgrade
#F90_OPTS_SERIAL = $(filter-out $(OMP_OPTS),$(filter-out -I${MPIMOD_PATH},$(filter-out $(MPI_CPP_OPTS),$(F90_OPTS)))

#==============================================================================
# Compiler and linker options
#==============================================================================

# Debugging
#F90_OPTS += -g -Minform=warn $(CPP_OPTS) $(OMP_OPTS)
#F90_LINK_OPTS = $(F90_OPTS)
#EXE_SFX := dbg

# Debugging with extra checks
# (Don't forget to enable core dump generation using `ulimit -c unlimited`)
#F90_OPTS += -g -O0 -Minform=warn -Mbounds -traceback $(CPP_OPTS) $(OMP_OPTS)
#F90_LINK_OPTS = $(F90_OPTS)
#EXE_SFX := dbgchk

# Optimized build with equivalent options to '-O2'
F90_OPTS += -O -Munroll -Mlre -Mvect=simd -Mflushz -Mcache_align -Mnoinline -Minform=warn $(CPP_OPTS) $(OMP_OPTS)
F90_LINK_OPTS = $(F90_OPTS) -fpic
EXE_SFX := opt

# Profiling
# Note: don't use '-Mpfi', it is incompatible with '-mp' and '-fpic'
#F90_OPTS += -Minstrument -Mprof=ccff -O -Munroll -Mlre -Mflushz -Mcache_align -Mnoinline -Minform=warn $(CPP_OPTS) $(OMP_OPTS)
#F90_LINK_OPTS = $(F90_OPTS) -fpic
#EXE_SFX := prof

# Fully optimized build
# Note: with PGI 19.9 and 19.10, for some reason using '-O2' or higher
# (including '-fast' and '-fastsse') chokes on autoradmt.f90:39
#     DO i = -1, 1
#   (see OLCF ticket #419691)
# This has been fixed in PGI 20.1
#F90_OPTS += -fast -Munroll -Mnoinline -Minform=warn $(CPP_OPTS) $(OMP_OPTS)
#F90_LINK_OPTS = $(F90_OPTS) -fpic
#EXE_SFX := fast

# Profiling, fully optimized
# Note: make sure to use PGI 20.1, see above
#F90_OPTS += -Minstrument -Mprof=ccff -fast -Munroll -Mnoinline -Minform=warn $(CPP_OPTS) $(OMP_OPTS)
#F90_LINK_OPTS = $(F90_OPTS) -fpic
#EXE_SFX := fastprof

#==============================================================================
# BLAS and LAPACK
#==============================================================================

# Use PGI's bundled BLAS and LAPACK
# TODO: test performance vs ESSL
#LAPACK_LIB := -lblas -llapack

# Use IBM ESSL (depends on libxlf90_r)
# This path was extracted from the modules and stored as summit-xlpaths.sh
# Make sure to `source summit-xlpaths.sh` and `module load essl`
# Note: it used to be necessary to also load libxlf90_r path to LD_LIBRARY_PATH
#       on run time; this was fixed with the Mar 10 2020 stack upgrade
ESSL_PATH = ${OLCF_ESSL_ROOT}/lib64
XLF_PATH  = ${OLCF_XLF_ROOT}/lib
LAPACK_LIB := -L$(ESSL_PATH) -lessl -L$(XLF_PATH) -lxlf90_r

#==============================================================================
# HDF5
#==============================================================================

# To disable, comment these three lines
# Make sure to `module load hdf5`
HDF5_INC = -I${OLCF_HDF5_ROOT}/include
HDF5_LIB = -L${OLCF_HDF5_ROOT}/lib -lhdf5_fortran -lhdf5_cpp -lhdf5_hl -lhdf5 -ldl
HDF5_CPP_OPTS := -D_HDF5_

CPP_OPTS += $(HDF5_CPP_OPTS)
F90_OPTS += $(HDF5_INC)

#==============================================================================
# Other libraries (retained here for historical purposes)
#==============================================================================

# ==- compile with libXC support ===
#CPP_OPTS := $(CPP_OPTS) -D_LIBXC_
#XC_LIB =

# ==- compile with NFFT support ===
#CPP_OPTS := $(CPP_OPTS) -D_NFFT_
#NFFT_INC = -I$(HOME)/local/include
#NFFT_LIB = $(HOME)/local/lib/libnfft3.a $(HOME)/local/lib/libfftw3.a

# === compile with Madness API ===
#CPP_OPTS := $(CPP_OPTS) -D_MAD_
#MADNESS_INC = -I$(HOME)/local/include
#MADNESS_LIB = -L$(HOME)/local/lib/ -lMADmra -lMADlinalg -lMADtensor -lMADmisc -lMADmuparser -lMADtinyxml -lMADworld -lmpichcxx -lstdc++

#==============================================================================
# List all libraries to link
#==============================================================================

LIBS := $(LAPACK_LIB) $(HDF5_LIB)
